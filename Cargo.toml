[package]
name = "diamond-types"
version = "1.0.0"
edition = "2021"
exclude = [
    ".idea", ".vscode",
    "vis", "wiki", "js",
    "benchmark_data", "test_data",
    ".github"
]
license = "ISC"
description = "The world's fastest text CRDT"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[workspace]
members = ["crates/*"]

[dependencies]
smartstring = "1.0.1"
str_indices = "0.4.3"
smallvec = { version = "1.10.0", features = ["union", "const_generics"] }
lazy_static = "1.4.0"

# Used by wasm module, CLI.
serde = { version = "1.0.183", features = ["derive"], optional = true }
rle = { version = "0.2.0", path = "crates/rle", features = ["smallvec"] }
content-tree = { version = "0.2.0", path = "crates/content-tree" }

# Only used for generating testing data.
serde_json = { version = "1.0.104", optional = true }

bumpalo = { version = "3.16.0", features = ["collections"] }

#jumprope = { path = "../../../jumprope-rs" }

# Its tempting to disable default-features in jumprope because it means we don't need to hook in crypto random, which
# saves some size in the wasm output size. But I think its better to default to having this feature enabled.
#jumprope = { path = "../jumprope-rs", version = "1.1.0" }
jumprope = "1.1.2"
humansize = "2.0.0"
num_enum = "0.7.2"

# crc32c might be faster, but it adds 10kb to the wasm bundle size. crc only adds 1kb.
#crc32c = "0.6"
crc = "3.0.0"
lz4_flex = { version = "0.11.3", optional = true }

#bitvec = "1.0.1"

# Needed for macos F_BARRIERFSYNC.
libc = "0.2.139"

rand = { version = "0.8.5", features = ["small_rng"], optional = true }


[dev-dependencies]
rand = { version = "0.8.5", features = ["small_rng"] }
crdt-testdata = { path = "crates/crdt-testdata" }
trace-alloc = { path = "crates/trace-alloc" }

# For OT fuzz data tests
#json_minimal = "0.1.3"

[features]
default = ["lz4", "storage", "rand"] # rand just for testing.
#default = ["lz4", "storage"]
memusage = ["trace-alloc/memusage"]
inlinerope = []
lz4 = ["dep:lz4_flex"]
serde = ["dep:serde", "smallvec/serde", "smartstring/serde"]
dot_export = []
wchar_conversion = ["jumprope/wchar_conversion"]
ops_to_old = []
merge_conflict_checks = []
storage = []
expose_benchmarking = ["serde", "serde_json"]

# This is internal only for generating JSON testing data. To generate, run test suite with
# rm *_tests.json; cargo test --features gen_test_data causalgraph::parents::tools -- --test-threads 1
gen_test_data = ["serde", "serde_json", "rand"]

[lib]
bench = false

[profile.release]
#debug = true
lto = true
codegen-units = 1
#opt-level = "s"
panic = "abort"

[profile.release.package.dt-wasm]
opt-level = 2
#opt-level = "s"
#debugging = true

[profile.release.package.dt-cli]
opt-level = "s"
#lto = false
strip = true

[profile.release.package.run_on_old]
debug = true

[profile.release.package.bench]
codegen-units = 1

# Use with cargo build --profile profiling
[profile.profiling]
inherits = "release"
debug = true
#opt-level = 0